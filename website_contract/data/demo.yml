-
    Creating demo data that require looking for accounts
-
    !python {model: ir.model.data} : |
        company = self.pool.get('res.users').browse(cr, uid, uid).company_id
        journal_id = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'general'), ('id', '!=', company.currency_exchange_journal_id.id)])
        expense_account_id = self.pool.get('account.account').search(cr, uid, [('user_type_id', '=', ref('account.data_account_type_expenses'))])
        xfa_account_id = self.pool.get('account.account').search(cr, uid, [('user_type_id', '=', ref('account.data_account_type_fixed_assets'))])
        if not xfa_account_id:
            xfa_account_id = self.pool.get('account.account').search(cr, uid, [('user_type_id', '=', ref('account.data_account_type_current_assets'))])
        from datetime import datetime, timedelta
        import time
        if xfa_account_id and expense_account_id and journal_id:
            vals = {
                'journal_id': journal_id[0],
                'name': 'Odoo Yearly',
                'type': 'sale',
                'method_period': 1,
                'method_number': 12,
                'account_asset_id': xfa_account_id[0],
                'account_depreciation_id': xfa_account_id[0],
                'account_depreciation_expense_id': expense_account_id[0],
            }
            self._update(cr, uid, 'account.asset.category', 'website_contract', vals, 'website_contract_asset_year')
            vals = {
                'journal_id': journal_id[0],
                'name': 'Odoo Monthly',
                'type': 'sale',
                'method_period': 1,
                'method_number': 1,
                'account_asset_id': xfa_account_id[0],
                'account_depreciation_id': xfa_account_id[0],
                'account_depreciation_expense_id': expense_account_id[0],
            }
            self._update(cr, uid, 'account.asset.category', 'website_contract', vals, 'website_contract_asset_month')
            self._update(cr, uid, 'sale.subscription.template', 'website_contract', {'template_asset_category_id': ref('website_contract.website_contract_asset_year')}, 'odoo_yearly')
            self._update(cr, uid, 'sale.subscription.template', 'website_contract', {'template_asset_category_id': ref('website_contract.website_contract_asset_month')}, 'odoo_monthly')
            self._update(cr, uid, 'sale.subscription', 'website_contract', {'asset_category_id': ref('website_contract.website_contract_asset_month')}, 'contract_portal_21')

-
    Create an invoice for the dashboard
-
    !python {model: sale.subscription, id: website_contract.contract_portal_21} : |
        company = self.pool.get('res.users').browse(cr, uid, uid).company_id
        journal_id = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'general'), ('id', '!=', company.currency_exchange_journal_id.id)])
        if journal_id and self[0].invoice_count < 1:
            invoice = self[0]._recurring_create_invoice()
